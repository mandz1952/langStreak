#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; staking.tact_LanguageStakingEscrow.headers.fc
;;
;; Header files for LanguageStakingEscrow
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_dict_get_slice_cell
cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline;

;; __tact_dict_set_slice_cell
(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v, builder b) inline;

;; $LockData$_store
builder $LockData$_store(builder build_0, (slice, int, int, int, int, int) v) inline;

;; $LockData$_store_cell
cell $LockData$_store_cell((slice, int, int, int, int, int) v, builder b) inline;

;; $LockData$_load
(slice, ((slice, int, int, int, int, int))) $LockData$_load(slice sc_0) inline;

;; $LockData$_as_optional
tuple $LockData$_as_optional((slice, int, int, int, int, int) v) inline;

;; $LockData$_load_opt
tuple $LockData$_load_opt(cell cl) inline;

;; $LanguageStakingEscrow$_store
builder $LanguageStakingEscrow$_store(builder build_0, (slice, cell) v) inline;

;; $LanguageStakingEscrow$_load
(slice, ((slice, cell))) $LanguageStakingEscrow$_load(slice sc_0) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $LockData$_not_null
((slice, int, int, int, int, int)) $LockData$_not_null(tuple v) inline;

;; $LockData$_to_tuple
tuple $LockData$_to_tuple(((slice, int, int, int, int, int)) v) inline;

;; $LockData$_to_opt_tuple
tuple $LockData$_to_opt_tuple(tuple v) inline;

;; $LockData$_to_opt_external
tuple $LockData$_to_opt_external(tuple v) inline;

;; $LanguageStakingEscrow$init$_load
(slice, ((slice))) $LanguageStakingEscrow$init$_load(slice sc_0) inline;

;; $LanguageStakingEscrow$_contract_init
(slice, cell) $LanguageStakingEscrow$_contract_init(slice $owner) impure inline;

;; $LanguageStakingEscrow$_contract_load
(slice, cell) $LanguageStakingEscrow$_contract_load() impure inline;

;; $LanguageStakingEscrow$_contract_store
() $LanguageStakingEscrow$_contract_store((slice, cell) v) impure inline;

;; $LanguageStakingEscrow$_fun_getLock
((slice, cell), tuple) $LanguageStakingEscrow$_fun_getLock((slice, cell) $self, slice $user) impure inline_ref;

;; $MessageParameters$_constructor_bounce_to_value_mode_body
((int, cell, int, slice, int)) $MessageParameters$_constructor_bounce_to_value_mode_body(int $bounce, slice $to, int $value, int $mode, cell $body) inline;

;; $LanguageStakingEscrow$_fun_notify
((slice, cell), ()) $LanguageStakingEscrow$_fun_notify((slice, cell) $self, cell $body) impure inline;

;; $LockData$_constructor_user_lockedAmount_lockTime_goalDays_bonusPercent_released
((slice, int, int, int, int, int)) $LockData$_constructor_user_lockedAmount_lockTime_goalDays_bonusPercent_released(slice $user, int $lockedAmount, int $lockTime, int $goalDays, int $bonusPercent, int $released) inline;

;; $SendParameters$_constructor_to_value_mode_body
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;


;; staking.tact_LanguageStakingEscrow.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

(cell, int) __tact_dict_delete(cell dict, int key_len, slice index) asm(index dict key_len) """
    DICTDEL
""";

((cell), ()) __tact_dict_set_ref(cell dict, int key_len, slice index, cell value) asm(value index dict key_len) """
    DICTSETREF
""";

(cell, int) __tact_dict_get_ref(cell dict, int key_len, slice index) asm(index dict key_len) """
    DICTGETREF NULLSWAPIFNOT
""";

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

forall X0, X1, X2, X3, X4, X5 -> tuple __tact_tuple_create_6((X0, X1, X2, X3, X4, X5) v) asm """
    6 TUPLE
""";

forall X0, X1, X2, X3, X4, X5 -> (X0, X1, X2, X3, X4, X5) __tact_tuple_destroy_6(tuple v) asm """
    6 UNTUPLE
""";

cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline {
    var (r, ok) = __tact_dict_get_ref(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline {
    if (null?(v)) {
        var (r, ok) = __tact_dict_delete(d, kl, k);
        return (r, ());
    } else {
        return __tact_dict_set_ref(d, kl, k, v);
    }
}

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

() $global_message((int, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
    STZEROES
    // → Stack state
    // s0: Builder
    // s1: `body`
    // s2: `mode`
    STDICT
    ENDC
    SWAP
    SENDRAWMSG
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    AND
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

int $global_now() impure asm """
    NOW
""";

((slice, cell), ()) $LanguageStakingEscrow$_fun_notify((slice, cell) $self, cell $body) impure inline {
    var (($self'owner, $self'locks)) = $self;
    slice $to = __tact_context_get_sender();
    int $bounce = false;
    if (false) {
        int $balance = $global_myBalance();
        int $balanceBeforeMessage = ($balance - $Context$_get_value(__tact_context_get()));
        if (($balanceBeforeMessage < 0)) {
            $global_nativeReserve(0, 0);
            $global_message($MessageParameters$_constructor_bounce_to_value_mode_body($bounce, $to, 0, 130, $body));
            return (($self'owner, $self'locks), ());
        }
    }
    $global_message($MessageParameters$_constructor_bounce_to_value_mode_body($bounce, $to, 0, 66, $body));
    return (($self'owner, $self'locks), ());
}

;; staking.tact_LanguageStakingEscrow.constants.fc
;; Cell 0pD/hxLOfrFQ3hwZBfvc0OzyTg4aOJafehHWasWO0wo=
cell __gen_cell_cell_d290ff8712ce7eb150de1c1905fbdcd0ecf24e0e1a38969f7a11d66ac58ed30a() asm """
    B{b5ee9c724101010100150000260000000045786365737320726566756e646564a3efd792} B>boc PUSHREF
""";

;; Cell C6XPGBSJgIhotmEnlVi3tlFMsaxuWnCSFlHHPCizinc=
cell __gen_cell_cell_0ba5cf181489808868b661279558b7b6514cb1ac6e5a70921651c73c28b38a77() asm """
    B{b5ee9c72410101010013000022000000004c6f636b2072656c6561736564e67c935d} B>boc PUSHREF
""";

;; staking.tact_LanguageStakingEscrow.storage.fc
;;
;; Type: Context
;; TLB: _ bounceable:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounceable, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline {
    return ($mode, $body, null(), null(), $value, $to, true);
}

;;
;; Type: MessageParameters
;; TLB: _ mode:int257 body:Maybe ^cell value:int257 to:address bounce:bool = MessageParameters
;;

((int, cell, int, slice, int)) $MessageParameters$_constructor_bounce_to_value_mode_body(int $bounce, slice $to, int $value, int $mode, cell $body) inline {
    return ($mode, $body, $value, $to, $bounce);
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v, builder b) inline {
    return $DeployOk$_store(b, v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: LockData
;; TLB: _ user:address lockedAmount:coins lockTime:uint32 goalDays:uint32 bonusPercent:uint8 released:bool = LockData
;;

builder $LockData$_store(builder build_0, (slice, int, int, int, int, int) v) inline {
    var (v'user, v'lockedAmount, v'lockTime, v'goalDays, v'bonusPercent, v'released) = v;
    build_0 = build_0.store_slice(v'user);
    build_0 = build_0.store_varuint16(v'lockedAmount);
    build_0 = build_0.store_uint(v'lockTime, 32);
    build_0 = build_0.store_uint(v'goalDays, 32);
    build_0 = build_0.store_uint(v'bonusPercent, 8);
    build_0 = build_0.store_int(v'released, 1);
    return build_0;
}

cell $LockData$_store_cell((slice, int, int, int, int, int) v, builder b) inline {
    return $LockData$_store(b, v).end_cell();
}

(slice, ((slice, int, int, int, int, int))) $LockData$_load(slice sc_0) inline {
    var v'user = sc_0~load_msg_addr();
    var v'lockedAmount = sc_0~load_varuint16();
    var v'lockTime = sc_0~load_uint(32);
    var v'goalDays = sc_0~load_uint(32);
    var v'bonusPercent = sc_0~load_uint(8);
    var v'released = sc_0~load_int(1);
    return (sc_0, (v'user, v'lockedAmount, v'lockTime, v'goalDays, v'bonusPercent, v'released));
}

tuple $LockData$_as_optional((slice, int, int, int, int, int) v) inline {
    var (v'user, v'lockedAmount, v'lockTime, v'goalDays, v'bonusPercent, v'released) = v;
    return __tact_tuple_create_6(v'user, v'lockedAmount, v'lockTime, v'goalDays, v'bonusPercent, v'released);
}

tuple $LockData$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $LockData$_as_optional(sc~$LockData$_load());
}

((slice, int, int, int, int, int)) $LockData$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'user, int vvv'lockedAmount, int vvv'lockTime, int vvv'goalDays, int vvv'bonusPercent, int vvv'released) = __tact_tuple_destroy_6(v);
    return (vvv'user, vvv'lockedAmount, vvv'lockTime, vvv'goalDays, vvv'bonusPercent, vvv'released);
}

tuple $LockData$_to_tuple(((slice, int, int, int, int, int)) v) inline {
    var (v'user, v'lockedAmount, v'lockTime, v'goalDays, v'bonusPercent, v'released) = v;
    return __tact_tuple_create_6(v'user, v'lockedAmount, v'lockTime, v'goalDays, v'bonusPercent, v'released);
}

tuple $LockData$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $LockData$_to_tuple($LockData$_not_null(v)); 
}

tuple $LockData$_to_opt_external(tuple v) inline {
    var loaded = $LockData$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

((slice, int, int, int, int, int)) $LockData$_constructor_user_lockedAmount_lockTime_goalDays_bonusPercent_released(slice $user, int $lockedAmount, int $lockTime, int $goalDays, int $bonusPercent, int $released) inline {
    return ($user, $lockedAmount, $lockTime, $goalDays, $bonusPercent, $released);
}

;;
;; Type: LanguageStakingEscrow
;; TLB: _ owner:address locks:dict<address, ^LockData{user:address,lockedAmount:coins,lockTime:uint32,goalDays:uint32,bonusPercent:uint8,released:bool}> = LanguageStakingEscrow
;;

builder $LanguageStakingEscrow$_store(builder build_0, (slice, cell) v) inline {
    var (v'owner, v'locks) = v;
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_dict(v'locks);
    return build_0;
}

(slice, ((slice, cell))) $LanguageStakingEscrow$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'locks = sc_0~load_dict();
    return (sc_0, (v'owner, v'locks));
}

(slice, ((slice))) $LanguageStakingEscrow$init$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    return (sc_0, (v'owner));
}

(slice, cell) $LanguageStakingEscrow$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$LanguageStakingEscrow$_load();
    }
    else {
        (slice $owner) = $sc~$LanguageStakingEscrow$init$_load();
        $sc.end_parse();
        return $LanguageStakingEscrow$_contract_init($owner);
    }
}

() $LanguageStakingEscrow$_contract_store((slice, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $LanguageStakingEscrow$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract LanguageStakingEscrow functions
;;

(slice, cell) $LanguageStakingEscrow$_contract_init(slice $owner) impure inline {
    var (($self'owner, $self'locks)) = (null(), null());
    $self'owner = $owner;
    return ($self'owner, $self'locks);
}

((slice, cell), tuple) $LanguageStakingEscrow$_fun_getLock((slice, cell) $self, slice $user) impure inline_ref {
    var (($self'owner, $self'locks)) = $self;
    var $fresh$ret_0 = $LockData$_load_opt(__tact_dict_get_slice_cell($self'locks, 267, $user));
    return (($self'owner, $self'locks), $fresh$ret_0);
}

;;
;; Get methods of a Contract LanguageStakingEscrow
;;

_ %getLock(slice $user) method_id(79751) {
    slice $user = $user;
    var self = $LanguageStakingEscrow$_contract_load();
    var res = self~$LanguageStakingEscrow$_fun_getLock($user);
    return $LockData$_to_opt_external(res);
}

;;
;; Routing of a Contract LanguageStakingEscrow
;;

;; message opcode reader utility: only binary receivers
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode_internal(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'owner, $self'locks) = $LanguageStakingEscrow$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    var op = in_msg~load_opcode_internal();
    ;; Receive LockTON message
    if (op == 1724648385) {
        var $msg'queryId = in_msg~load_uint(64);
        var $msg'amount = in_msg~load_varuint16();
        var $msg'goalDays = in_msg~load_uint(32);
        var $msg'bonusPercent = in_msg~load_uint(8);
        throw_unless(62441, ($Context$_get_value(__tact_context_get()) >= $msg'amount));
        throw_unless(43692, null?($LockData$_load_opt(__tact_dict_get_slice_cell($self'locks, 267, __tact_context_get_sender()))));
        $self'locks~__tact_dict_set_slice_cell(267, __tact_context_get_sender(), $LockData$_store_cell($LockData$_constructor_user_lockedAmount_lockTime_goalDays_bonusPercent_released(__tact_context_get_sender(), $msg'amount, $global_now(), $msg'goalDays, $msg'bonusPercent, false), begin_cell()));
        if (($Context$_get_value(__tact_context_get()) > $msg'amount)) {
            $global_send($SendParameters$_constructor_to_value_mode_body(__tact_context_get_sender(), ($Context$_get_value(__tact_context_get()) - $msg'amount), 64, __gen_cell_cell_d290ff8712ce7eb150de1c1905fbdcd0ecf24e0e1a38969f7a11d66ac58ed30a()));
        }
        $LanguageStakingEscrow$_contract_store(($self'owner, $self'locks));
        return ();
    }
    
    ;; Receive ReleaseLock message
    if (op == 2483069916) {
        var $msg'queryId = in_msg~load_uint(64);
        var $msg'user = in_msg~load_msg_addr();
        var $msg'success = in_msg~load_int(1);
        throw_unless(27736, ( equal_slices_bits(__tact_context_get_sender(), $self'owner) ));
        tuple $lockOpt = $LockData$_load_opt(__tact_dict_get_slice_cell($self'locks, 267, $msg'user));
        throw_unless(2771, (~ null?($lockOpt)));
        var ($lock'user, $lock'lockedAmount, $lock'lockTime, $lock'goalDays, $lock'bonusPercent, $lock'released) = $LockData$_not_null($lockOpt);
        throw_unless(23215, (~ $lock'released));
        int $amountToSend = 0;
        if ($msg'success) {
            int $bonus = (($lock'lockedAmount * $lock'bonusPercent) / 100);
            $amountToSend = ($lock'lockedAmount + $bonus);
        } else {
            $amountToSend = (($lock'lockedAmount * 90) / 100);
        }
        $global_send($SendParameters$_constructor_to_value_mode_body($lock'user, $amountToSend, 64, __gen_cell_cell_0ba5cf181489808868b661279558b7b6514cb1ac6e5a70921651c73c28b38a77()));
        $lock'released = true;
        $self'locks~__tact_dict_set_slice_cell(267, $msg'user, $LockData$_store_cell(($lock'user, $lock'lockedAmount, $lock'lockTime, $lock'goalDays, $lock'bonusPercent, $lock'released), begin_cell()));
        $LanguageStakingEscrow$_contract_store(($self'owner, $self'locks));
        return ();
    }
    
    ;; Receive Deploy message
    if (op == 0x946a98b6) {
        var $deploy'queryId = in_msg~load_uint(64);
        ($self'owner, $self'locks)~$LanguageStakingEscrow$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId), begin_cell()));
        $LanguageStakingEscrow$_contract_store(($self'owner, $self'locks));
        return ();
    }
    
    ;; Throw if not handled
    throw(130);
}


() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
        execute current@ context@ current!
        {
            // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
            // We want to extract recv_internal/recv_external from the dict and select needed function
            // not by jumping to the needed function by it's index, but by using usual IF statements.

            }END> b> // Close previous builder, now we have a cell of previous code on top of the stack

            <{ // Start of the new code builder
                SETCP0
                // Swap the new code builder with the previous code, now we have previous code on top of the stack
                swap
                // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                <s ref@

                // Extract the recv_internal from the dict
                dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                swap

                // Delete the recv_internal from the dict
                0 swap @procdictkeylen idict- drop
                // Delete the recv_external from the dict (it's okay if it's not there)
                -1 swap @procdictkeylen idict- drop
                // Delete the __tact_selector_hack from the dict
                65535 swap @procdictkeylen idict- drop

                // Bring the code builder from the bottom of the stack
                // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                depth 1- roll
                // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                swap

                // Check if the dict is empty
                dup null?
                // Store a copy of this flag in the bottom of the stack
                dup depth 1- -roll
                {
                    // If the dict is empty, just drop it (it will be null if it's empty)
                    drop
                }
                {
                    // If the dict is not empty, prepare continuation to be stored in c3
                    <{
                        // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                        swap @procdictkeylen DICTPUSHCONST
                        // Jump to the needed function by it's index
                        DICTIGETJMPZ
                        // If such key is not found, throw 11 along with the key as an argument
                        11 THROWARG
                    }> PUSHCONT
                    // Store the continuation in c3
                    c3 POP
                } cond

                // Function id is on top of the (runtime) stack
                DUP IFNOTJMP:<{
                    // place recv_internal here
                    DROP swap @addop
                }>

                // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                depth 1- roll
                {
                    // If the dict is empty, throw 11
                    11 THROWARG
                }
                {
                    // If the dict is not empty, jump to continuation from c3
                    c3 PUSH JMPX
                } cond
            }> b>
        } : }END>c
        current@ context! current!
    } does @atend !
""";

() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}