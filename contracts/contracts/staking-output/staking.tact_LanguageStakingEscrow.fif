// automatically generated from `@stdlib/std/stdlib.fc` `/home/mandz1952/hakaton/langStreak/contracts/contracts/staking-output/staking.tact_LanguageStakingEscrow.fc` 
PROGRAM{
  DECLPROC __tact_context_get
  DECLPROC __tact_context_get_sender
  DECLPROC __tact_dict_get_slice_cell
  DECLPROC __tact_dict_set_slice_cell
  DECLPROC $DeployOk$_store
  DECLPROC $DeployOk$_store_cell
  DECLPROC $LockData$_store
  DECLPROC $LockData$_store_cell
  DECLPROC $LockData$_load
  DECLPROC $LockData$_as_optional
  DECLPROC $LockData$_load_opt
  DECLPROC $LanguageStakingEscrow$_store
  DECLPROC $LanguageStakingEscrow$_load
  DECLPROC $Context$_get_value
  DECLPROC $LockData$_not_null
  DECLPROC $LockData$_to_tuple
  DECLPROC $LockData$_to_opt_tuple
  DECLPROC $LockData$_to_opt_external
  DECLPROC $LanguageStakingEscrow$init$_load
  DECLPROC $LanguageStakingEscrow$_contract_init
  DECLPROC $LanguageStakingEscrow$_contract_load
  DECLPROC $LanguageStakingEscrow$_contract_store
  DECLPROC $LanguageStakingEscrow$_fun_getLock
  DECLPROC $MessageParameters$_constructor_bounce_to_value_mode_body
  DECLPROC $LanguageStakingEscrow$_fun_notify
  DECLPROC $LockData$_constructor_user_lockedAmount_lockTime_goalDays_bonusPercent_released
  DECLPROC $SendParameters$_constructor_to_value_mode_body
  DECLPROC $DeployOk$_constructor_queryId
  79751 DECLMETHOD %getLock
  DECLPROC recv_internal
  65535 DECLMETHOD __tact_selector_hack
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_context_get PROCINLINE:<{
    __tact_context GETGLOB
    4 UNTUPLE
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  __tact_dict_get_slice_cell PROCINLINE:<{
    -ROT
        DICTGETREF NULLSWAPIFNOT
    IF:<{
    }>ELSE<{
      DROP
      PUSHNULL
    }>
  }>
  __tact_dict_set_slice_cell PROCINLINE:<{
    DUP
    ISNULL
    IF:<{
      DROP
      -ROT
          DICTDEL
      DROP
    }>ELSE<{
      s1 s3 s3 XCHG3
          DICTSETREF
    }>
  }>
  $DeployOk$_store PROCINLINE:<{
    2952335191 PUSHINT
    ROT
    32 STU
    64 STU
  }>
  $DeployOk$_store_cell PROCINLINE:<{
    SWAP
    $DeployOk$_store INLINECALLDICT
    ENDC
  }>
  $LockData$_store PROCINLINE:<{
    s5 s6 XCHG2
    STSLICE
    s0 s3 XCHG2
    STVARUINT16
    32 STU
    32 STU
    8 STU
    1 STI
  }>
  $LockData$_store_cell PROCINLINE:<{
    6 -ROLL
    $LockData$_store INLINECALLDICT
    ENDC
  }>
  $LockData$_load PROCINLINE:<{
    LDMSGADDR
    LDVARUINT16
    32 LDU
    32 LDU
    8 LDU
    1 LDI
    6 -ROLL
  }>
  $LockData$_as_optional PROCINLINE:<{
        6 TUPLE
  }>
  $LockData$_load_opt PROCINLINE:<{
    DUP
    ISNULL
    IF:<{
      DROP
      PUSHNULL
    }>ELSE<{
      CTOS
      $LockData$_load INLINECALLDICT
      1 6 BLKDROP2
      $LockData$_as_optional INLINECALLDICT
    }>
  }>
  $LanguageStakingEscrow$_store PROCINLINE:<{
    s0 s2 XCHG
    STSLICE
    STDICT
  }>
  $LanguageStakingEscrow$_load PROCINLINE:<{
    LDMSGADDR
    LDDICT
    -ROT
  }>
  $Context$_get_value PROCINLINE:<{
    s1 s3 XCHG
    3 BLKDROP
  }>
  $LockData$_not_null PROCINLINE:<{
    DUP
    ISNULL
    128 THROWIF
        6 UNTUPLE
  }>
  $LockData$_to_tuple PROCINLINE:<{
        6 TUPLE
  }>
  $LockData$_to_opt_tuple PROCINLINE:<{
    DUP
    ISNULL
    IF:<{
      DROP
      PUSHNULL
    }>ELSE<{
      $LockData$_not_null INLINECALLDICT
      $LockData$_to_tuple INLINECALLDICT
    }>
  }>
  $LockData$_to_opt_external PROCINLINE:<{
    $LockData$_to_opt_tuple INLINECALLDICT
    DUP
    ISNULL
    IF:<{
      DROP
      PUSHNULL
    }>ELSE<{
    }>
  }>
  $LanguageStakingEscrow$init$_load PROCINLINE:<{
    LDMSGADDR
    SWAP
  }>
  $LanguageStakingEscrow$_contract_init PROCINLINE:<{
    PUSHNULL
  }>
  $LanguageStakingEscrow$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $LanguageStakingEscrow$_load INLINECALLDICT
      1 2 BLKDROP2
    }>ELSE<{
      $LanguageStakingEscrow$init$_load INLINECALLDICT
      SWAP
      ENDS
      $LanguageStakingEscrow$_contract_init INLINECALLDICT
    }>
  }>
  $LanguageStakingEscrow$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    -ROT
    $LanguageStakingEscrow$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $LanguageStakingEscrow$_fun_getLock PROCREF:<{
    267 PUSHINT
    s2 PUSH
    s0 s2 XCHG
    __tact_dict_get_slice_cell INLINECALLDICT
    $LockData$_load_opt INLINECALLDICT
  }>
  $MessageParameters$_constructor_bounce_to_value_mode_body PROCINLINE:<{
    s3 s3 XCHG2
    s0 s4 XCHG
  }>
  $LanguageStakingEscrow$_fun_notify PROCINLINE:<{
    __tact_context_get_sender INLINECALLDICT
    FALSE
    0 PUSHINT
    s0 s3 XCHG2
    66 PUSHINT
    SWAP
    $MessageParameters$_constructor_bounce_to_value_mode_body INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
        STZEROES
        // → Stack state
        // s0: Builder
        // s1: `body`
        // s2: `mode`
        STDICT
        ENDC
        SWAP
        SENDRAWMSG
  }>
  $LockData$_constructor_user_lockedAmount_lockTime_goalDays_bonusPercent_released PROCINLINE:<{
  }>
  $SendParameters$_constructor_to_value_mode_body PROCINLINE:<{
    2SWAP
    PUSHNULL
    PUSHNULL
    s0 s0 s3 XCHG3
    TRUE
  }>
  $DeployOk$_constructor_queryId PROCINLINE:<{
  }>
  %getLock PROC:<{
    $LanguageStakingEscrow$_contract_load INLINECALLDICT
    ROT
    $LanguageStakingEscrow$_fun_getLock INLINECALLDICT
    2 1 BLKDROP2
    $LockData$_to_opt_external INLINECALLDICT
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $LanguageStakingEscrow$_contract_load INLINECALLDICT
    s0 s3 XCHG
    IFJMP:<{
      3 BLKDROP
    }>
    SWAP
    32 LDUQ 130 THROWIFNOT
    OVER
    1724648385 PUSHINT
    EQUAL
    IFJMP:<{
      NIP
      64 LDU
      NIP
      LDVARUINT16
      32 LDU
      8 LDU
      DROP
      62441 PUSHINT
      __tact_context_get INLINECALLDICT
      $Context$_get_value INLINECALLDICT
      s4 PUSH
      GEQ
      THROWANYIFNOT
      43692 PUSHINT
      267 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      s7 PUSH
      -ROT
      __tact_dict_get_slice_cell INLINECALLDICT
      $LockData$_load_opt INLINECALLDICT
      ISNULL
      THROWANYIFNOT
      267 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      __tact_context_get_sender INLINECALLDICT
          NOW
      s3 s0 s6 XC2PU
      s0 s3 XCHG
      s1 s6 s5 XCHG3
      FALSE
      $LockData$_constructor_user_lockedAmount_lockTime_goalDays_bonusPercent_released INLINECALLDICT
      NEWC
      $LockData$_store_cell INLINECALLDICT
      s3 s5 XCHG
      __tact_dict_set_slice_cell INLINECALLDICT
      __tact_context_get INLINECALLDICT
      $Context$_get_value INLINECALLDICT
      s3 PUSH
      GREATER
      IF:<{
        __tact_context_get_sender INLINECALLDICT
        __tact_context_get INLINECALLDICT
        $Context$_get_value INLINECALLDICT
        s0 s4 XCHG2
        SUB
        64 PUSHINT
            B{b5ee9c724101010100150000260000000045786365737320726566756e646564a3efd792} B>boc PUSHREF
        s3 s5 XCHG
        $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            105 PUSHINT         // 1 + 4 + 4 + 64 + 32
            STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
            // → Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            // Group 2: Placing the Builder after code and data, then checking those for nullability
            s2 XCHG0
            DUP2
            ISNULL
            SWAP
            ISNULL
            AND
            // → Stack state
            // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
            // s1: `code`
            // s2: `data`
            // s3: Builder
            // s4: `body`
            // s5: `mode`
            // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
            <{
                DROP2 // drop `data` and `code`, since either of those is null
                b{0} STSLICECONST
            }> PUSHCONT
            // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
            <{
                // _ split_depth:(Maybe (## 5))
                //   special:(Maybe TickTock)
                //   code:(Maybe ^Cell)
                //   data:(Maybe ^Cell)
                //   library:(Maybe ^Cell)
                // = StateInit;
                ROT                // place message Builder on top
                b{10} STSLICECONST // store Maybe = true, Either = false
                // Start composing inlined StateInit
                b{00} STSLICECONST // store split_depth and special first
                STDICT             // store code
                STDICT             // store data
                b{0} STSLICECONST  // store library
            }> PUSHCONT
            // Group 3: IFELSE that does the branching shown above
            IFELSE
            // → Stack state
            // s0: Builder
            // s1: null or StateInit
            // s2: `body`
            // s3: `mode`
            // Group 4: Finalizing the message
            STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
            ENDC
            // → Stack state
            // s0: Cell
            // s1: `mode`
            // Group 5: Sending the message, with `mode` on top
            SWAP
            SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      }>ELSE<{
        s2 POP
      }>
      SWAP
      $LanguageStakingEscrow$_contract_store INLINECALLDICT
    }>
    OVER
    2483069916 PUSHINT
    EQUAL
    IFJMP:<{
      NIP
      64 LDU
      NIP
      LDMSGADDR
      1 LDI
      DROP
      27736 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      s4 PUSH
      SDEQ
      THROWANYIFNOT
      s3 PUSH
      267 PUSHINT
      s3 PUSH
      __tact_dict_get_slice_cell INLINECALLDICT
      $LockData$_load_opt INLINECALLDICT
      2771 PUSHINT
      OVER
      ISNULL
      NOT
      THROWANYIFNOT
      $LockData$_not_null INLINECALLDICT
      23215 PUSHINT
      SWAP
      NOT
      THROWANYIFNOT
      s0 s5 XCHG
      IF:<{
        s2 s4 PUSH2
        MUL
        100 PUSHINT
        DIV
        s3 s(-1) PUXC
        ADD
      }>ELSE<{
        s2 PUSH
        90 MULCONST
        100 PUSHINT
        DIV
      }>
      64 PUSHINT
          B{b5ee9c72410101010013000022000000004c6f636b2072656c6561736564e67c935d} B>boc PUSHREF
      s6 PUSH
      3 -ROLL
      $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      TRUE
      267 PUSHINT
      s6 s6 XCHG2
      NEWC
      $LockData$_store_cell INLINECALLDICT
      s3 s4 XCHG
      s1 s2 XCHG
      __tact_dict_set_slice_cell INLINECALLDICT
      $LanguageStakingEscrow$_contract_store INLINECALLDICT
    }>
    SWAP
    2490013878 PUSHINT
    EQUAL
    IFJMP:<{
      64 LDU
      DROP
      $DeployOk$_constructor_queryId INLINECALLDICT
      NEWC
      $DeployOk$_store_cell INLINECALLDICT
      s1 s2 XCHG
      $LanguageStakingEscrow$_fun_notify INLINECALLDICT
      $LanguageStakingEscrow$_contract_store INLINECALLDICT
    }>
    3 BLKDROP
    130 THROW
  }>
  __tact_selector_hack PROC:<{
    @atend @ 1 {
            execute current@ context@ current!
            {
                // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
                // We want to extract recv_internal/recv_external from the dict and select needed function
                // not by jumping to the needed function by it's index, but by using usual IF statements.
                }END> b> // Close previous builder, now we have a cell of previous code on top of the stack
                <{ // Start of the new code builder
                    SETCP0
                    // Swap the new code builder with the previous code, now we have previous code on top of the stack
                    swap
                    // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                    <s ref@
                    // Extract the recv_internal from the dict
                    dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                    swap
                    // Delete the recv_internal from the dict
                    0 swap @procdictkeylen idict- drop
                    // Delete the recv_external from the dict (it's okay if it's not there)
                    -1 swap @procdictkeylen idict- drop
                    // Delete the __tact_selector_hack from the dict
                    65535 swap @procdictkeylen idict- drop
                    // Bring the code builder from the bottom of the stack
                    // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                    depth 1- roll
                    // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                    swap
                    // Check if the dict is empty
                    dup null?
                    // Store a copy of this flag in the bottom of the stack
                    dup depth 1- -roll
                    {
                        // If the dict is empty, just drop it (it will be null if it's empty)
                        drop
                    }
                    {
                        // If the dict is not empty, prepare continuation to be stored in c3
                        <{
                            // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                            swap @procdictkeylen DICTPUSHCONST
                            // Jump to the needed function by it's index
                            DICTIGETJMPZ
                            // If such key is not found, throw 11 along with the key as an argument
                            11 THROWARG
                        }> PUSHCONT
                        // Store the continuation in c3
                        c3 POP
                    } cond
                    // Function id is on top of the (runtime) stack
                    DUP IFNOTJMP:<{
                        // place recv_internal here
                        DROP swap @addop
                    }>
                    // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                    depth 1- roll
                    {
                        // If the dict is empty, throw 11
                        11 THROWARG
                    }
                    {
                        // If the dict is not empty, jump to continuation from c3
                        c3 PUSH JMPX
                    } cond
                }> b>
            } : }END>c
            current@ context! current!
        } does @atend !
  }>
}END>c
