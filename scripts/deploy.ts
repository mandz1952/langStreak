import { toNano, Address, Cell, contractAddress } from 'ton-core';
import { TonClient, WalletContractV4 } from 'ton';
import { getHttpEndpoint } from '@orbs-network/ton-access';
import { mnemonicToWalletKey } from 'ton-crypto';
import * as fs from 'fs'; // –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏

async function run() {
  // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–Ω–µ—Ç–∞
  const endpoint = await getHttpEndpoint({ network: 'testnet' });
  const client = new TonClient({ endpoint });

  // 2. –ì–æ—Ç–æ–≤–∏–º –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
  // ‚ö†Ô∏è –í–ê–ñ–ù–û: –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à—É —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Ñ—Ä–∞–∑—É –æ—Ç –¢–ï–°–¢–û–í–û–ì–û –∫–æ—à–µ–ª—å–∫–∞
  const mnemonic = "virus spoil episode guard bronze bundle accident assist polar again wing saddle lyrics retreat depart afraid grow craft just recall entire motor shop skirt";
  const key = await mnemonicToWalletKey(mnemonic.split(" "));
  const wallet = WalletContractV4.create({ publicKey: key.publicKey, workchain: 0 });
  const walletContract = client.open(wallet);
  const sender = walletContract.sender(key.secretKey);

  // --- –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ NFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ---
  console.log('üöÄ Deploying NFT Collection contract...');

  // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
  const codeHexNFT = fs.readFileSync('./contracts/output_nft/nft.boc.hex', 'utf8');
  const codeCellNFT = Cell.fromBoc(Buffer.from(codeHexNFT, 'hex'))[0];

  // 4. –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è NFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  // init(owner: Address, nftCode: Cell, metadata: Cell)
  // ‚ö†Ô∏è –ó–ê–ì–õ–£–®–ö–ê! –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å Cell —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
  // –î–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.
  const dataCellNFT = Cell.EMPTY; 

  // 5. –§–æ—Ä–º–∏—Ä—É–µ–º StateInit
  const stateInitNFT = {
    code: codeCellNFT,
    data: dataCellNFT,
  };

  // 6. –ü–æ–ª—É—á–∞–µ–º –±—É–¥—É—â–∏–π –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  const contractAddressNFT = contractAddress(0, stateInitNFT);
  console.log(`Future address of NFT contract: ${contractAddressNFT.toString()}`);

  // 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
  await sender.send({
    to: contractAddressNFT,
    value: toNano('0.05'), // 0.05 TON –Ω–∞ –≥–∞–∑
    init: stateInitNFT,
  });
  console.log('‚úÖ Deployment transaction sent for NFT contract!');

  // –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –∫–æ–¥ –¥–ª—è staking –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–∏–∂–µ
}

run().catch(console.error);
